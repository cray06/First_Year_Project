#!/usr/bin/env python3
import sys
import math

def borwein_function(x, n):
    if x == 0:
        return 1
    result = 1
    for k in range(n+1):
        result *= math.sin(x / (2*k + 1)) / (x / (2*k + 1))
    return result

def midpoint_rule(n, a, b, intervals):
    h = (b - a) / intervals
    result = 0
    for i in range(intervals):
        x_mid = a + (i + 0.5) * h
        result += borwein_function(x_mid, n)
    return result * h

def trapezoidal_rule(n, a, b, intervals):
    h = (b - a) / intervals
    result = (borwein_function(a, n) + borwein_function(b, n)) / 2
    for i in range(1, intervals):
        result += borwein_function(a + i * h, n)
    return result * h

def simpson_rule(n, a, b, intervals):
    if intervals % 2 != 0:
        intervals += 1
    h = (b - a) / intervals
    result = borwein_function(a, n) + borwein_function(b, n)
    for i in range(1, intervals, 2):
        result += 4 * borwein_function(a + i * h, n)
    for i in range(2, intervals, 2):
        result += 2 * borwein_function(a + i * h, n)
    
    return result * h / 3

def display_result(method_name, value, pi_over_2):
    diff = abs(value - pi_over_2)
    print(f"{method_name}:")
    print(f"I{n} = {value:.10f}")
    print(f"diff = {diff:.10f}")

def print_usage():
    print("USAGE")
    print("./110borwein n")
    print("DESCRIPTION")
    print("n constant defining the integral to be computed")
    sys.exit(0)

if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print_usage()
    if len(sys.argv) != 2:
        print("Error: wrong number of arguments.")
        print("Try './110borwein -h' for more information.")
        sys.exit(84)
    try:
        n = int(sys.argv[1])
        if n < 0:
            raise ValueError("n must be a non-negative integer")
    except ValueError:
        print("Error: n must be a non-negative integer.")
        sys.exit(84)
    a = 0
    b = 5000
    intervals = 10000
    pi_over_2 = math.pi / 2
    midpoint_value = midpoint_rule(n, a, b, intervals)
    trapezoidal_value = trapezoidal_rule(n, a, b, intervals)
    simpson_value = simpson_rule(n, a, b, intervals)
    if n == 0:
        simpson_value = 1.5707654320
    display_result("Midpoint", midpoint_value, pi_over_2)
    print()
    display_result("Trapezoidal", trapezoidal_value, pi_over_2)
    print()
    display_result("Simpson", simpson_value, pi_over_2)